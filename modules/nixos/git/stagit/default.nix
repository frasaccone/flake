{
  lib,
  options,
  config,
  pkgs,
  ...
}:
{
  options.modules.git.stagit = {
    enable = lib.mkOption {
      description = "Whether to enable Stagit.";
      default = false;
      type = lib.types.bool;
    };
    output = lib.mkOption {
      description = "The directory where generated HTML files will reside.";
      default = "/srv/git/.stagit";
      readOnly = true;
      type = lib.types.uniq lib.types.path;
    };
    baseUrl = lib.mkOption {
      description = ''
        The base URL used to make links in the Atom feed generated by Stagit.
      '';
      type = lib.types.uniq lib.types.str;
    };
    iconPng = lib.mkOption {
      description = "The icon PNG file.";
      default = pkgs.writeText "icon.png" "";
      type = lib.types.uniq lib.types.path;
    };
  };

  config =
    let
      inherit (config.modules.git) stagit;
    in
    lib.mkIf (config.modules.git.enable && stagit.enable) {
      systemd = {
        services = {
          stagit = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            after = [ "git-repositories.service" ];
            serviceConfig =
              let
                stagit-repositories =
                  config.modules.git.repositories
                  |> builtins.attrNames
                  |> builtins.map (name: ''
                    ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}/${name}
                    cd ${stagit.output}/${name}

                    ${pkgs.stagit}/bin/stagit -u ${stagit.baseUrl}/ \
                    ${config.modules.git.directory}/${name}
                  '')
                  |> builtins.concatStringsSep "\n"
                  |> pkgs.writeShellScriptBin "stagit-repositories";
                stagit-index = pkgs.writeShellScriptBin "stagit-index" (
                  let
                    inherit (config.modules.git) directory;
                    arguments =
                      config.modules.git.repositories
                      |> builtins.attrNames
                      |> builtins.map (name: "${directory}/${name}")
                      |> builtins.concatStringsSep " ";
                  in
                  ''
                    ${pkgs.stagit}/bin/stagit-index ${arguments} >\
                     ${stagit.output}/index.html
                  ''
                );
                assets-repositories =
                  config.modules.git.repositories
                  |> builtins.attrNames
                  |> builtins.map (name: ''
                    ${pkgs.coreutils}/bin/mkdir -p ${stagit.output}/${name}

                    ${pkgs.coreutils}/bin/ln -sf ${stagit.iconPng} \
                    ${stagit.output}/${name}/favicon.png

                    ${pkgs.coreutils}/bin/ln -sf ${stagit.iconPng} \
                    ${stagit.output}/${name}/logo.png

                    ${pkgs.coreutils}/bin/ln -sf ${./style.css} \
                    ${stagit.output}/${name}/style.css
                  '')
                  |> builtins.concatStringsSep "\n"
                  |> pkgs.writeShellScriptBin "assets-repositories";
                assets-index = pkgs.writeShellScriptBin "assets-index" ''
                  ${pkgs.coreutils}/bin/ln -sf ${stagit.iconPng} \
                  ${stagit.output}/favicon.png

                  ${pkgs.coreutils}/bin/ln -sf ${stagit.iconPng} \
                  ${stagit.output}/logo.png

                  ${pkgs.coreutils}/bin/ln -sf ${./style.css} \
                  ${stagit.output}/style.css
                '';
              in
              {
                User = "git";
                Group = "git";
                Type = "oneshot";
                ExecStart = [
                  "${stagit-repositories}/bin/stagit-repositories"
                  "${stagit-index}/bin/stagit-index"
                  "${assets-repositories}/bin/assets-repositories"
                  "${assets-index}/bin/assets-index"
                ];
              };
          };
        };
        timers = {
          stagit = {
            enable = true;
            wantedBy = [ "multi-user.target" ];
            timerConfig = {
              OnCalendar = "*:0/1";
              Persistent = true;
            };
          };
        };
      };
    };
}
